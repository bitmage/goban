// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(function() {
    var Board;
    Board = function() {
      var board, x, _i;
      board = [];
      for (x = _i = 1; _i <= 19; x = ++_i) {
        board[x] = [];
      }
      board.get = function(coord) {
        var y, _ref;
        x = coord[0], y = coord[1];
        return (_ref = board[x]) != null ? _ref[y] : void 0;
      };
      board.set = function(coord, stone) {
        var y, _ref;
        x = coord[0], y = coord[1];
        return (_ref = board[x]) != null ? _ref[y] = stone : void 0;
      };
      return board;
    };
    Board.offBoard = function(coord) {
      var n, _i, _len;
      for (_i = 0, _len = coord.length; _i < _len; _i++) {
        n = coord[_i];
        if (__indexOf.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], n) < 0) {
          return true;
        }
      }
      return false;
    };
    Board.switchColor = function(color) {
      if (color === 'black') {
        return 'white';
      } else {
        return 'black';
      }
    };
    Board.compareCoord = function(coordA, coordB) {
      return _.isEqual(coordA, coordB);
    };
    Board.unionCoord = function(coordsA, coordsB) {
      var exists, newCoords;
      newCoords = _.clone(coordsA);
      exists = function(b) {
        return _.any(coordsA, function(a) {
          return _.isEqual(a, b);
        });
      };
      _.each(coordsB, function(b) {
        if (!exists(b)) {
          return newCoords.push(b);
        }
      });
      return newCoords;
    };
    return Board;
  });

}).call(this);
